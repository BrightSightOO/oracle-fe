/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import type { AccountTypeArgs } from "../types";
import type {
  Account,
  Context,
  Pda,
  PublicKey,
  RpcAccount,
  RpcGetAccountOptions,
  RpcGetAccountsOptions,
} from "@metaplex-foundation/umi";
import type { Serializer } from "@metaplex-foundation/umi/serializers";

import {
  assertAccountExists,
  deserializeAccount,
  gpaBuilder,
  publicKey as toPublicKey,
} from "@metaplex-foundation/umi";
import {
  mapSerializer,
  publicKey as publicKeySerializer,
  string,
  struct,
  u64,
} from "@metaplex-foundation/umi/serializers";

import { AccountType, getAccountTypeSerializer } from "../types";

export type VoteV1 = Account<VoteV1AccountData>;

export type VoteV1AccountData = {
  accountType: AccountType;
  voting: PublicKey;
  stake: PublicKey;
  votes: bigint;
  value: bigint;
};

export type VoteV1AccountDataArgs = {
  voting: PublicKey;
  stake: PublicKey;
  votes: number | bigint;
  value: number | bigint;
};

export function getVoteV1AccountDataSerializer(): Serializer<
  VoteV1AccountDataArgs,
  VoteV1AccountData
> {
  return mapSerializer<VoteV1AccountDataArgs, any, VoteV1AccountData>(
    struct<VoteV1AccountData>(
      [
        ["accountType", getAccountTypeSerializer()],
        ["voting", publicKeySerializer()],
        ["stake", publicKeySerializer()],
        ["votes", u64()],
        ["value", u64()],
      ],
      { description: "VoteV1AccountData" },
    ),
    (value) => ({ ...value, accountType: AccountType.VoteV1 }),
  );
}

export function deserializeVoteV1(rawAccount: RpcAccount): VoteV1 {
  return deserializeAccount(rawAccount, getVoteV1AccountDataSerializer());
}

export async function fetchVoteV1(
  context: Pick<Context, "rpc">,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions,
): Promise<VoteV1> {
  const maybeAccount = await context.rpc.getAccount(toPublicKey(publicKey, false), options);
  assertAccountExists(maybeAccount, "VoteV1");
  return deserializeVoteV1(maybeAccount);
}

export async function safeFetchVoteV1(
  context: Pick<Context, "rpc">,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions,
): Promise<VoteV1 | null> {
  const maybeAccount = await context.rpc.getAccount(toPublicKey(publicKey, false), options);
  return maybeAccount.exists ? deserializeVoteV1(maybeAccount) : null;
}

export async function fetchAllVoteV1(
  context: Pick<Context, "rpc">,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions,
): Promise<Array<VoteV1>> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options,
  );
  return maybeAccounts.map((maybeAccount) => {
    assertAccountExists(maybeAccount, "VoteV1");
    return deserializeVoteV1(maybeAccount);
  });
}

export async function safeFetchAllVoteV1(
  context: Pick<Context, "rpc">,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions,
): Promise<Array<VoteV1>> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options,
  );
  return maybeAccounts
    .filter((maybeAccount) => maybeAccount.exists)
    .map((maybeAccount) => deserializeVoteV1(maybeAccount as RpcAccount));
}

export function getVoteV1GpaBuilder(context: Pick<Context, "rpc" | "programs">) {
  const programId = context.programs.getPublicKey(
    "optimisticOracle",
    "DVM3hK9SDgXLmVoLng1KrTJCzTnhw31hAnqTYP7uGCot",
  );
  return gpaBuilder(context, programId)
    .registerFields<{
      accountType: AccountTypeArgs;
      voting: PublicKey;
      stake: PublicKey;
      votes: number | bigint;
      value: number | bigint;
    }>({
      accountType: [0, getAccountTypeSerializer()],
      voting: [1, publicKeySerializer()],
      stake: [33, publicKeySerializer()],
      votes: [65, u64()],
      value: [73, u64()],
    })
    .deserializeUsing<VoteV1>((account) => deserializeVoteV1(account))
    .whereField("accountType", AccountType.VoteV1);
}

export function getVoteV1Size(): number {
  return 81;
}

export function findVoteV1Pda(
  context: Pick<Context, "eddsa" | "programs">,
  seeds: {
    /** The address of the voting account. */
    voting: PublicKey;
    /** The address of the stake account. */
    stake: PublicKey;
  },
): Pda {
  const programId = context.programs.getPublicKey(
    "optimisticOracle",
    "DVM3hK9SDgXLmVoLng1KrTJCzTnhw31hAnqTYP7uGCot",
  );
  return context.eddsa.findPda(programId, [
    string({ size: "variable" }).serialize("vote"),
    publicKeySerializer().serialize(seeds.voting),
    publicKeySerializer().serialize(seeds.stake),
  ]);
}

export async function fetchVoteV1FromSeeds(
  context: Pick<Context, "eddsa" | "programs" | "rpc">,
  seeds: Parameters<typeof findVoteV1Pda>[1],
  options?: RpcGetAccountOptions,
): Promise<VoteV1> {
  return fetchVoteV1(context, findVoteV1Pda(context, seeds), options);
}

export async function safeFetchVoteV1FromSeeds(
  context: Pick<Context, "eddsa" | "programs" | "rpc">,
  seeds: Parameters<typeof findVoteV1Pda>[1],
  options?: RpcGetAccountOptions,
): Promise<VoteV1 | null> {
  return safeFetchVoteV1(context, findVoteV1Pda(context, seeds), options);
}
