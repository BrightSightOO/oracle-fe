/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import type { ResolvedAccount, ResolvedAccountsWithIndices } from "../shared";
import type { CreateResolverArgs, CreateResolverArgsArgs } from "../types";
import type { Context, Pda, PublicKey, Signer, TransactionBuilder } from "@metaplex-foundation/umi";
import type { Serializer } from "@metaplex-foundation/umi/serializers";

import { transactionBuilder } from "@metaplex-foundation/umi";
import { mapSerializer, struct, u8 } from "@metaplex-foundation/umi/serializers";

import { findResolverPda } from "../accounts";
import { expectPublicKey, getAccountMetasAndSigners } from "../shared";
import { getCreateResolverArgsSerializer } from "../types";

// Accounts.
export type CreateResolverInstructionAccounts = {
  /** Resolver */
  resolver?: PublicKey | Pda;
  /** Parimutuel market */
  market: PublicKey | Pda;
  /** Oracle request */
  request: PublicKey | Pda;
  /** Payer */
  payer?: Signer;
  /** System program */
  systemProgram?: PublicKey | Pda;
};

// Data.
export type CreateResolverInstructionData = {
  discriminator: number;
  createResolverArgs: CreateResolverArgs;
};

export type CreateResolverInstructionDataArgs = {
  createResolverArgs: CreateResolverArgsArgs;
};

export function getCreateResolverInstructionDataSerializer(): Serializer<
  CreateResolverInstructionDataArgs,
  CreateResolverInstructionData
> {
  return mapSerializer<CreateResolverInstructionDataArgs, any, CreateResolverInstructionData>(
    struct<CreateResolverInstructionData>(
      [
        ["discriminator", u8()],
        ["createResolverArgs", getCreateResolverArgsSerializer()],
      ],
      { description: "CreateResolverInstructionData" },
    ),
    (value) => ({ ...value, discriminator: 0 }),
  );
}

// Args.
export type CreateResolverInstructionArgs = CreateResolverInstructionDataArgs;

// Instruction.
export function createResolver(
  context: Pick<Context, "eddsa" | "payer" | "programs">,
  input: CreateResolverInstructionAccounts & CreateResolverInstructionArgs,
): TransactionBuilder {
  // Program ID.
  const programId = context.programs.getPublicKey(
    "parimutuelResolver",
    "RS1njPGQsykXyyPGUiAC9dvPyoqw73vtMFPJhipibj1",
  );

  // Accounts.
  const resolvedAccounts = {
    resolver: {
      index: 0,
      isWritable: true as boolean,
      value: input.resolver ?? null,
    },
    market: {
      index: 1,
      isWritable: false as boolean,
      value: input.market ?? null,
    },
    request: {
      index: 2,
      isWritable: false as boolean,
      value: input.request ?? null,
    },
    payer: {
      index: 3,
      isWritable: true as boolean,
      value: input.payer ?? null,
    },
    systemProgram: {
      index: 4,
      isWritable: false as boolean,
      value: input.systemProgram ?? null,
    },
  } satisfies ResolvedAccountsWithIndices;

  // Arguments.
  const resolvedArgs: CreateResolverInstructionArgs = { ...input };

  // Default values.
  if (!resolvedAccounts.resolver.value) {
    resolvedAccounts.resolver.value = findResolverPda(context, {
      market: expectPublicKey(resolvedAccounts.market.value),
    });
  }
  if (!resolvedAccounts.payer.value) {
    resolvedAccounts.payer.value = context.payer;
  }
  if (!resolvedAccounts.systemProgram.value) {
    resolvedAccounts.systemProgram.value = context.programs.getPublicKey(
      "splSystem",
      "11111111111111111111111111111111",
    );
    resolvedAccounts.systemProgram.isWritable = false;
  }

  // Accounts in order.
  const orderedAccounts: Array<ResolvedAccount> = Object.values(resolvedAccounts).sort(
    (a, b) => a.index - b.index,
  );

  // Keys and Signers.
  const [keys, signers] = getAccountMetasAndSigners(orderedAccounts, "programId", programId);

  // Data.
  const data = getCreateResolverInstructionDataSerializer().serialize(resolvedArgs);

  // Bytes Created On Chain.
  const bytesCreatedOnChain = 0;

  return transactionBuilder([
    { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
  ]);
}
