/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import type { ResolvedAccount, ResolvedAccountsWithIndices } from "../shared";
import type { CreateRequestArgs, CreateRequestArgsArgs } from "../types";
import type { Context, Pda, PublicKey, Signer, TransactionBuilder } from "@metaplex-foundation/umi";
import type { Serializer } from "@metaplex-foundation/umi/serializers";

import { findAssociatedTokenPda } from "@metaplex-foundation/mpl-toolbox";
import { transactionBuilder } from "@metaplex-foundation/umi";
import { mapSerializer, struct, u8 } from "@metaplex-foundation/umi/serializers";

import { findRewardPda } from "../../hooked";
import { findOraclePda } from "../accounts";
import { expectPublicKey, getAccountMetasAndSigners } from "../shared";
import { getCreateRequestArgsSerializer } from "../types";

// Accounts.
export type CreateRequestInstructionAccounts = {
  /** Program oracle account */
  oracle?: PublicKey | Pda;
  /** Request */
  request: PublicKey | Pda;
  /** Reward mint */
  rewardMint: PublicKey | Pda;
  /** Reward source token account */
  rewardSource?: PublicKey | Pda;
  /** Reward escrow token account */
  rewardEscrow?: PublicKey | Pda;
  /** Creator */
  creator?: Signer;
  /** Payer */
  payer?: Signer;
  /** SPL token program */
  tokenProgram?: PublicKey | Pda;
  /** System program */
  systemProgram?: PublicKey | Pda;
};

// Data.
export type CreateRequestInstructionData = {
  discriminator: number;
  createRequestArgs: CreateRequestArgs;
};

export type CreateRequestInstructionDataArgs = {
  createRequestArgs: CreateRequestArgsArgs;
};

export function getCreateRequestInstructionDataSerializer(): Serializer<
  CreateRequestInstructionDataArgs,
  CreateRequestInstructionData
> {
  return mapSerializer<CreateRequestInstructionDataArgs, any, CreateRequestInstructionData>(
    struct<CreateRequestInstructionData>(
      [
        ["discriminator", u8()],
        ["createRequestArgs", getCreateRequestArgsSerializer()],
      ],
      { description: "CreateRequestInstructionData" },
    ),
    (value) => ({ ...value, discriminator: 1 }),
  );
}

// Args.
export type CreateRequestInstructionArgs = CreateRequestInstructionDataArgs;

// Instruction.
export function createRequest(
  context: Pick<Context, "eddsa" | "identity" | "payer" | "programs">,
  input: CreateRequestInstructionAccounts & CreateRequestInstructionArgs,
): TransactionBuilder {
  // Program ID.
  const programId = context.programs.getPublicKey(
    "optimisticOracle",
    "DVMysqEbKDZdaJ1AVcmAqyVfvvZAMFwUkEQsNMQTvMZg",
  );

  // Accounts.
  const resolvedAccounts = {
    oracle: {
      index: 0,
      isWritable: true as boolean,
      value: input.oracle ?? null,
    },
    request: {
      index: 1,
      isWritable: true as boolean,
      value: input.request ?? null,
    },
    rewardMint: {
      index: 2,
      isWritable: false as boolean,
      value: input.rewardMint ?? null,
    },
    rewardSource: {
      index: 3,
      isWritable: true as boolean,
      value: input.rewardSource ?? null,
    },
    rewardEscrow: {
      index: 4,
      isWritable: true as boolean,
      value: input.rewardEscrow ?? null,
    },
    creator: {
      index: 5,
      isWritable: false as boolean,
      value: input.creator ?? null,
    },
    payer: {
      index: 6,
      isWritable: true as boolean,
      value: input.payer ?? null,
    },
    tokenProgram: {
      index: 7,
      isWritable: false as boolean,
      value: input.tokenProgram ?? null,
    },
    systemProgram: {
      index: 8,
      isWritable: false as boolean,
      value: input.systemProgram ?? null,
    },
  } satisfies ResolvedAccountsWithIndices;

  // Arguments.
  const resolvedArgs: CreateRequestInstructionArgs = { ...input };

  // Default values.
  if (!resolvedAccounts.oracle.value) {
    resolvedAccounts.oracle.value = findOraclePda(context);
  }
  if (!resolvedAccounts.creator.value) {
    resolvedAccounts.creator.value = context.identity;
  }
  if (!resolvedAccounts.rewardSource.value) {
    resolvedAccounts.rewardSource.value = findAssociatedTokenPda(context, {
      mint: expectPublicKey(resolvedAccounts.rewardMint.value),
      owner: expectPublicKey(resolvedAccounts.creator.value),
    });
  }
  if (!resolvedAccounts.rewardEscrow.value) {
    resolvedAccounts.rewardEscrow.value = findRewardPda(context, {
      request: expectPublicKey(resolvedAccounts.request.value),
    });
  }
  if (!resolvedAccounts.payer.value) {
    resolvedAccounts.payer.value = context.payer;
  }
  if (!resolvedAccounts.tokenProgram.value) {
    resolvedAccounts.tokenProgram.value = context.programs.getPublicKey(
      "splToken",
      "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA",
    );
    resolvedAccounts.tokenProgram.isWritable = false;
  }
  if (!resolvedAccounts.systemProgram.value) {
    resolvedAccounts.systemProgram.value = context.programs.getPublicKey(
      "splSystem",
      "11111111111111111111111111111111",
    );
    resolvedAccounts.systemProgram.isWritable = false;
  }

  // Accounts in order.
  const orderedAccounts: Array<ResolvedAccount> = Object.values(resolvedAccounts).sort(
    (a, b) => a.index - b.index,
  );

  // Keys and Signers.
  const [keys, signers] = getAccountMetasAndSigners(orderedAccounts, "programId", programId);

  // Data.
  const data = getCreateRequestInstructionDataSerializer().serialize(resolvedArgs);

  // Bytes Created On Chain.
  const bytesCreatedOnChain = 0;

  return transactionBuilder([
    { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
  ]);
}
