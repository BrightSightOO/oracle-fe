/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import type { ResolvedAccount, ResolvedAccountsWithIndices } from "../shared";
import type { Context, Pda, PublicKey, Signer, TransactionBuilder } from "@metaplex-foundation/umi";
import type { Serializer } from "@metaplex-foundation/umi/serializers";

import { findAssociatedTokenPda } from "@metaplex-foundation/mpl-toolbox";
import { transactionBuilder } from "@metaplex-foundation/umi";
import { mapSerializer, struct, u8 } from "@metaplex-foundation/umi/serializers";

import { findVoteV1Pda, findVotingV1Pda } from "../accounts";
import { expectPublicKey, getAccountMetasAndSigners } from "../shared";

// Accounts.
export type ClaimVoteV1InstructionAccounts = {
  /** Request */
  request: PublicKey | Pda;
  /** Assertion */
  assertion: PublicKey | Pda;
  /** Voting */
  voting?: PublicKey | Pda;
  /** Vote */
  vote?: PublicKey | Pda;
  /** Stake */
  stake: PublicKey | Pda;
  /** Bond mint */
  bondMint: PublicKey | Pda;
  /** Bond destination token account */
  bondDestination?: PublicKey | Pda;
  /** Bond escrow token account of incorrect asserter/disputer */
  bondEscrow: PublicKey | Pda;
  /** Voter */
  voter?: Signer;
  /** SPL token program */
  tokenProgram?: PublicKey | Pda;
  /** System program */
  systemProgram?: PublicKey | Pda;
};

// Data.
export type ClaimVoteV1InstructionData = { discriminator: number };

export type ClaimVoteV1InstructionDataArgs = {};

export function getClaimVoteV1InstructionDataSerializer(): Serializer<
  ClaimVoteV1InstructionDataArgs,
  ClaimVoteV1InstructionData
> {
  return mapSerializer<ClaimVoteV1InstructionDataArgs, any, ClaimVoteV1InstructionData>(
    struct<ClaimVoteV1InstructionData>([["discriminator", u8()]], {
      description: "ClaimVoteV1InstructionData",
    }),
    (value) => ({ ...value, discriminator: 15 }),
  );
}

// Instruction.
export function claimVoteV1(
  context: Pick<Context, "eddsa" | "identity" | "programs">,
  input: ClaimVoteV1InstructionAccounts,
): TransactionBuilder {
  // Program ID.
  const programId = context.programs.getPublicKey(
    "optimisticOracle",
    "DVM3hK9SDgXLmVoLng1KrTJCzTnhw31hAnqTYP7uGCot",
  );

  // Accounts.
  const resolvedAccounts = {
    request: {
      index: 0,
      isWritable: false as boolean,
      value: input.request ?? null,
    },
    assertion: {
      index: 1,
      isWritable: false as boolean,
      value: input.assertion ?? null,
    },
    voting: {
      index: 2,
      isWritable: false as boolean,
      value: input.voting ?? null,
    },
    vote: { index: 3, isWritable: true as boolean, value: input.vote ?? null },
    stake: {
      index: 4,
      isWritable: false as boolean,
      value: input.stake ?? null,
    },
    bondMint: {
      index: 5,
      isWritable: false as boolean,
      value: input.bondMint ?? null,
    },
    bondDestination: {
      index: 6,
      isWritable: true as boolean,
      value: input.bondDestination ?? null,
    },
    bondEscrow: {
      index: 7,
      isWritable: true as boolean,
      value: input.bondEscrow ?? null,
    },
    voter: {
      index: 8,
      isWritable: true as boolean,
      value: input.voter ?? null,
    },
    tokenProgram: {
      index: 9,
      isWritable: false as boolean,
      value: input.tokenProgram ?? null,
    },
    systemProgram: {
      index: 10,
      isWritable: false as boolean,
      value: input.systemProgram ?? null,
    },
  } satisfies ResolvedAccountsWithIndices;

  // Default values.
  if (!resolvedAccounts.voting.value) {
    resolvedAccounts.voting.value = findVotingV1Pda(context, {
      request: expectPublicKey(resolvedAccounts.request.value),
    });
  }
  if (!resolvedAccounts.vote.value) {
    resolvedAccounts.vote.value = findVoteV1Pda(context, {
      voting: expectPublicKey(resolvedAccounts.voting.value),
      stake: expectPublicKey(resolvedAccounts.stake.value),
    });
  }
  if (!resolvedAccounts.voter.value) {
    resolvedAccounts.voter.value = context.identity;
  }
  if (!resolvedAccounts.bondDestination.value) {
    resolvedAccounts.bondDestination.value = findAssociatedTokenPda(context, {
      mint: expectPublicKey(resolvedAccounts.bondMint.value),
      owner: expectPublicKey(resolvedAccounts.voter.value),
    });
  }
  if (!resolvedAccounts.tokenProgram.value) {
    resolvedAccounts.tokenProgram.value = context.programs.getPublicKey(
      "splToken",
      "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA",
    );
    resolvedAccounts.tokenProgram.isWritable = false;
  }
  if (!resolvedAccounts.systemProgram.value) {
    resolvedAccounts.systemProgram.value = context.programs.getPublicKey(
      "splSystem",
      "11111111111111111111111111111111",
    );
    resolvedAccounts.systemProgram.isWritable = false;
  }

  // Accounts in order.
  const orderedAccounts: Array<ResolvedAccount> = Object.values(resolvedAccounts).sort(
    (a, b) => a.index - b.index,
  );

  // Keys and Signers.
  const [keys, signers] = getAccountMetasAndSigners(orderedAccounts, "programId", programId);

  // Data.
  const data = getClaimVoteV1InstructionDataSerializer().serialize({});

  // Bytes Created On Chain.
  const bytesCreatedOnChain = 0;

  return transactionBuilder([
    { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
  ]);
}
