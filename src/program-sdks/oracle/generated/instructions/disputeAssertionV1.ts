/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import type { ResolvedAccount, ResolvedAccountsWithIndices } from "../shared";
import type { Context, Pda, PublicKey, Signer, TransactionBuilder } from "@metaplex-foundation/umi";
import type { Serializer } from "@metaplex-foundation/umi/serializers";

import { findAssociatedTokenPda } from "@metaplex-foundation/mpl-toolbox";
import { transactionBuilder } from "@metaplex-foundation/umi";
import { mapSerializer, struct, u8 } from "@metaplex-foundation/umi/serializers";

import { findDisputeBondPda } from "../../hooked";
import { findOracleV1Pda, findVotingV1Pda } from "../accounts";
import { expectPublicKey, getAccountMetasAndSigners } from "../shared";

// Accounts.
export type DisputeAssertionV1InstructionAccounts = {
  /** Oracle */
  oracle?: PublicKey | Pda;
  /** Config */
  config: PublicKey | Pda;
  /** Request */
  request: PublicKey | Pda;
  /** Assertion */
  assertion: PublicKey | Pda;
  /** Voting */
  voting?: PublicKey | Pda;
  /** Bond mint */
  bondMint: PublicKey | Pda;
  /** Bond source token account */
  bondSource?: PublicKey | Pda;
  /** Bond escrow token account */
  bondEscrow?: PublicKey | Pda;
  /** Disputer */
  disputer?: Signer;
  /** Payer */
  payer?: Signer;
  /** SPL token program */
  tokenProgram?: PublicKey | Pda;
  /** System program */
  systemProgram?: PublicKey | Pda;
};

// Data.
export type DisputeAssertionV1InstructionData = { discriminator: number };

export type DisputeAssertionV1InstructionDataArgs = {};

export function getDisputeAssertionV1InstructionDataSerializer(): Serializer<
  DisputeAssertionV1InstructionDataArgs,
  DisputeAssertionV1InstructionData
> {
  return mapSerializer<
    DisputeAssertionV1InstructionDataArgs,
    any,
    DisputeAssertionV1InstructionData
  >(
    struct<DisputeAssertionV1InstructionData>([["discriminator", u8()]], {
      description: "DisputeAssertionV1InstructionData",
    }),
    (value) => ({ ...value, discriminator: 9 }),
  );
}

// Instruction.
export function disputeAssertionV1(
  context: Pick<Context, "eddsa" | "identity" | "payer" | "programs">,
  input: DisputeAssertionV1InstructionAccounts,
): TransactionBuilder {
  // Program ID.
  const programId = context.programs.getPublicKey(
    "optimisticOracle",
    "DVM3hK9SDgXLmVoLng1KrTJCzTnhw31hAnqTYP7uGCot",
  );

  // Accounts.
  const resolvedAccounts = {
    oracle: {
      index: 0,
      isWritable: false as boolean,
      value: input.oracle ?? null,
    },
    config: {
      index: 1,
      isWritable: false as boolean,
      value: input.config ?? null,
    },
    request: {
      index: 2,
      isWritable: true as boolean,
      value: input.request ?? null,
    },
    assertion: {
      index: 3,
      isWritable: true as boolean,
      value: input.assertion ?? null,
    },
    voting: {
      index: 4,
      isWritable: true as boolean,
      value: input.voting ?? null,
    },
    bondMint: {
      index: 5,
      isWritable: false as boolean,
      value: input.bondMint ?? null,
    },
    bondSource: {
      index: 6,
      isWritable: true as boolean,
      value: input.bondSource ?? null,
    },
    bondEscrow: {
      index: 7,
      isWritable: true as boolean,
      value: input.bondEscrow ?? null,
    },
    disputer: {
      index: 8,
      isWritable: false as boolean,
      value: input.disputer ?? null,
    },
    payer: {
      index: 9,
      isWritable: true as boolean,
      value: input.payer ?? null,
    },
    tokenProgram: {
      index: 10,
      isWritable: false as boolean,
      value: input.tokenProgram ?? null,
    },
    systemProgram: {
      index: 11,
      isWritable: false as boolean,
      value: input.systemProgram ?? null,
    },
  } satisfies ResolvedAccountsWithIndices;

  // Default values.
  if (!resolvedAccounts.oracle.value) {
    resolvedAccounts.oracle.value = findOracleV1Pda(context);
  }
  if (!resolvedAccounts.voting.value) {
    resolvedAccounts.voting.value = findVotingV1Pda(context, {
      assertion: expectPublicKey(resolvedAccounts.assertion.value),
    });
  }
  if (!resolvedAccounts.disputer.value) {
    resolvedAccounts.disputer.value = context.identity;
  }
  if (!resolvedAccounts.bondSource.value) {
    resolvedAccounts.bondSource.value = findAssociatedTokenPda(context, {
      mint: expectPublicKey(resolvedAccounts.bondMint.value),
      owner: expectPublicKey(resolvedAccounts.disputer.value),
    });
  }
  if (!resolvedAccounts.bondEscrow.value) {
    resolvedAccounts.bondEscrow.value = findDisputeBondPda(context, {
      request: expectPublicKey(resolvedAccounts.request.value),
    });
  }
  if (!resolvedAccounts.payer.value) {
    resolvedAccounts.payer.value = context.payer;
  }
  if (!resolvedAccounts.tokenProgram.value) {
    resolvedAccounts.tokenProgram.value = context.programs.getPublicKey(
      "splToken",
      "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA",
    );
    resolvedAccounts.tokenProgram.isWritable = false;
  }
  if (!resolvedAccounts.systemProgram.value) {
    resolvedAccounts.systemProgram.value = context.programs.getPublicKey(
      "splSystem",
      "11111111111111111111111111111111",
    );
    resolvedAccounts.systemProgram.isWritable = false;
  }

  // Accounts in order.
  const orderedAccounts: Array<ResolvedAccount> = Object.values(resolvedAccounts).sort(
    (a, b) => a.index - b.index,
  );

  // Keys and Signers.
  const [keys, signers] = getAccountMetasAndSigners(orderedAccounts, "programId", programId);

  // Data.
  const data = getDisputeAssertionV1InstructionDataSerializer().serialize({});

  // Bytes Created On Chain.
  const bytesCreatedOnChain = 0;

  return transactionBuilder([
    { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
  ]);
}
