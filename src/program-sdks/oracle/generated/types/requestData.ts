/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import type {
  GetDataEnumKind,
  GetDataEnumKindContent,
  Serializer,
} from "@metaplex-foundation/umi/serializers";

import { dataEnum, string, struct } from "@metaplex-foundation/umi/serializers";

export type RequestData = { __kind: "YesNo"; question: string };

export type RequestDataArgs = RequestData;

export function getRequestDataSerializer(): Serializer<RequestDataArgs, RequestData> {
  return dataEnum<RequestData>(
    [["YesNo", struct<GetDataEnumKindContent<RequestData, "YesNo">>([["question", string()]])]],
    { description: "RequestData" },
  );
}

// Data Enum Helpers.
export function requestData(
  kind: "YesNo",
  data: GetDataEnumKindContent<RequestDataArgs, "YesNo">,
): GetDataEnumKind<RequestDataArgs, "YesNo">;
export function requestData<K extends RequestDataArgs["__kind"]>(
  kind: K,
  data?: any,
): Extract<RequestDataArgs, { __kind: K }> {
  return Array.isArray(data) ? { __kind: kind, fields: data } : { __kind: kind, ...(data ?? {}) };
}
export function isRequestData<K extends RequestData["__kind"]>(
  kind: K,
  value: RequestData,
): value is RequestData & { __kind: K } {
  return value.__kind === kind;
}
