/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import type { ResolvedAccount, ResolvedAccountsWithIndices } from "../shared";
import type { ExpireAssertionArgs, ExpireAssertionArgsArgs } from "../types";
import type { Context, Pda, PublicKey, TransactionBuilder } from "@metaplex-foundation/umi";
import type { Serializer } from "@metaplex-foundation/umi/serializers";

import { transactionBuilder } from "@metaplex-foundation/umi";
import { mapSerializer, struct, u8 } from "@metaplex-foundation/umi/serializers";

import { findAssertionPda } from "../accounts";
import { expectPublicKey, getAccountMetasAndSigners } from "../shared";
import { getExpireAssertionArgsSerializer } from "../types";

// Accounts.
export type ExpireAssertionInstructionAccounts = {
  /** Request */
  request: PublicKey | Pda;
  /** Assertion */
  assertion?: PublicKey | Pda;
};

// Data.
export type ExpireAssertionInstructionData = {
  discriminator: number;
  expireAssertionArgs: ExpireAssertionArgs;
};

export type ExpireAssertionInstructionDataArgs = {
  expireAssertionArgs: ExpireAssertionArgsArgs;
};

export function getExpireAssertionInstructionDataSerializer(): Serializer<
  ExpireAssertionInstructionDataArgs,
  ExpireAssertionInstructionData
> {
  return mapSerializer<ExpireAssertionInstructionDataArgs, any, ExpireAssertionInstructionData>(
    struct<ExpireAssertionInstructionData>(
      [
        ["discriminator", u8()],
        ["expireAssertionArgs", getExpireAssertionArgsSerializer()],
      ],
      { description: "ExpireAssertionInstructionData" },
    ),
    (value) => ({ ...value, discriminator: 3 }),
  );
}

// Args.
export type ExpireAssertionInstructionArgs = ExpireAssertionInstructionDataArgs;

// Instruction.
export function expireAssertion(
  context: Pick<Context, "eddsa" | "programs">,
  input: ExpireAssertionInstructionAccounts & ExpireAssertionInstructionArgs,
): TransactionBuilder {
  // Program ID.
  const programId = context.programs.getPublicKey(
    "optimisticOracle",
    "DVMysqEbKDZdaJ1AVcmAqyVfvvZAMFwUkEQsNMQTvMZg",
  );

  // Accounts.
  const resolvedAccounts = {
    request: {
      index: 0,
      isWritable: true as boolean,
      value: input.request ?? null,
    },
    assertion: {
      index: 1,
      isWritable: true as boolean,
      value: input.assertion ?? null,
    },
  } satisfies ResolvedAccountsWithIndices;

  // Arguments.
  const resolvedArgs: ExpireAssertionInstructionArgs = { ...input };

  // Default values.
  if (!resolvedAccounts.assertion.value) {
    resolvedAccounts.assertion.value = findAssertionPda(context, {
      request: expectPublicKey(resolvedAccounts.request.value),
    });
  }

  // Accounts in order.
  const orderedAccounts: Array<ResolvedAccount> = Object.values(resolvedAccounts).sort(
    (a, b) => a.index - b.index,
  );

  // Keys and Signers.
  const [keys, signers] = getAccountMetasAndSigners(orderedAccounts, "programId", programId);

  // Data.
  const data = getExpireAssertionInstructionDataSerializer().serialize(resolvedArgs);

  // Bytes Created On Chain.
  const bytesCreatedOnChain = 0;

  return transactionBuilder([
    { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
  ]);
}
