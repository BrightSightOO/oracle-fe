/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import type { AccountTypeArgs } from "../types";
import type {
  Account,
  Context,
  Pda,
  PublicKey,
  RpcAccount,
  RpcGetAccountOptions,
  RpcGetAccountsOptions,
} from "@metaplex-foundation/umi";
import type { Serializer } from "@metaplex-foundation/umi/serializers";

import {
  assertAccountExists,
  deserializeAccount,
  gpaBuilder,
  publicKey as toPublicKey,
} from "@metaplex-foundation/umi";
import {
  mapSerializer,
  publicKey as publicKeySerializer,
  string,
  struct,
  u64,
} from "@metaplex-foundation/umi/serializers";

import { AccountType, getAccountTypeSerializer } from "../types";

export type Currency = Account<CurrencyAccountData>;

export type CurrencyAccountData = {
  accountType: AccountType;
  mint: PublicKey;
  minimumBond: bigint;
};

export type CurrencyAccountDataArgs = {
  mint: PublicKey;
  minimumBond: number | bigint;
};

export function getCurrencyAccountDataSerializer(): Serializer<
  CurrencyAccountDataArgs,
  CurrencyAccountData
> {
  return mapSerializer<CurrencyAccountDataArgs, any, CurrencyAccountData>(
    struct<CurrencyAccountData>(
      [
        ["accountType", getAccountTypeSerializer()],
        ["mint", publicKeySerializer()],
        ["minimumBond", u64()],
      ],
      { description: "CurrencyAccountData" },
    ),
    (value) => ({ ...value, accountType: AccountType.Currency }),
  );
}

export function deserializeCurrency(rawAccount: RpcAccount): Currency {
  return deserializeAccount(rawAccount, getCurrencyAccountDataSerializer());
}

export async function fetchCurrency(
  context: Pick<Context, "rpc">,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions,
): Promise<Currency> {
  const maybeAccount = await context.rpc.getAccount(toPublicKey(publicKey, false), options);
  assertAccountExists(maybeAccount, "Currency");
  return deserializeCurrency(maybeAccount);
}

export async function safeFetchCurrency(
  context: Pick<Context, "rpc">,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions,
): Promise<Currency | null> {
  const maybeAccount = await context.rpc.getAccount(toPublicKey(publicKey, false), options);
  return maybeAccount.exists ? deserializeCurrency(maybeAccount) : null;
}

export async function fetchAllCurrency(
  context: Pick<Context, "rpc">,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions,
): Promise<Array<Currency>> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options,
  );
  return maybeAccounts.map((maybeAccount) => {
    assertAccountExists(maybeAccount, "Currency");
    return deserializeCurrency(maybeAccount);
  });
}

export async function safeFetchAllCurrency(
  context: Pick<Context, "rpc">,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions,
): Promise<Array<Currency>> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options,
  );
  return maybeAccounts
    .filter((maybeAccount) => maybeAccount.exists)
    .map((maybeAccount) => deserializeCurrency(maybeAccount as RpcAccount));
}

export function getCurrencyGpaBuilder(context: Pick<Context, "rpc" | "programs">) {
  const programId = context.programs.getPublicKey(
    "optimisticOracle",
    "DVMysqEbKDZdaJ1AVcmAqyVfvvZAMFwUkEQsNMQTvMZg",
  );
  return gpaBuilder(context, programId)
    .registerFields<{
      accountType: AccountTypeArgs;
      mint: PublicKey;
      minimumBond: number | bigint;
    }>({
      accountType: [0, getAccountTypeSerializer()],
      mint: [1, publicKeySerializer()],
      minimumBond: [33, u64()],
    })
    .deserializeUsing<Currency>((account) => deserializeCurrency(account))
    .whereField("accountType", AccountType.Currency);
}

export function getCurrencySize(): number {
  return 41;
}

export function findCurrencyPda(
  context: Pick<Context, "eddsa" | "programs">,
  seeds: {
    /** The address of the currency mint. */
    mint: PublicKey;
  },
): Pda {
  const programId = context.programs.getPublicKey(
    "optimisticOracle",
    "DVMysqEbKDZdaJ1AVcmAqyVfvvZAMFwUkEQsNMQTvMZg",
  );
  return context.eddsa.findPda(programId, [
    string({ size: "variable" }).serialize("currency"),
    publicKeySerializer().serialize(seeds.mint),
  ]);
}

export async function fetchCurrencyFromSeeds(
  context: Pick<Context, "eddsa" | "programs" | "rpc">,
  seeds: Parameters<typeof findCurrencyPda>[1],
  options?: RpcGetAccountOptions,
): Promise<Currency> {
  return fetchCurrency(context, findCurrencyPda(context, seeds), options);
}

export async function safeFetchCurrencyFromSeeds(
  context: Pick<Context, "eddsa" | "programs" | "rpc">,
  seeds: Parameters<typeof findCurrencyPda>[1],
  options?: RpcGetAccountOptions,
): Promise<Currency | null> {
  return safeFetchCurrency(context, findCurrencyPda(context, seeds), options);
}
