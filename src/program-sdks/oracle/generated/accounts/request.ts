/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import type {
  AccountTypeArgs,
  RequestData,
  RequestDataArgs,
  RequestState,
  RequestStateArgs,
} from "../types";
import type {
  Account,
  Context,
  Pda,
  PublicKey,
  RpcAccount,
  RpcGetAccountOptions,
  RpcGetAccountsOptions,
} from "@metaplex-foundation/umi";
import type { Serializer } from "@metaplex-foundation/umi/serializers";

import {
  assertAccountExists,
  deserializeAccount,
  gpaBuilder,
  publicKey as toPublicKey,
} from "@metaplex-foundation/umi";
import {
  i64,
  mapSerializer,
  publicKey as publicKeySerializer,
  string,
  struct,
  u64,
} from "@metaplex-foundation/umi/serializers";

import {
  AccountType,
  getAccountTypeSerializer,
  getRequestDataSerializer,
  getRequestStateSerializer,
} from "../types";

export type Request = Account<RequestAccountData>;

export type RequestAccountData = {
  accountType: AccountType;
  index: bigint;
  creator: PublicKey;
  reward: bigint;
  rewardMint: PublicKey;
  assertionTimestamp: bigint;
  resolveTimestamp: bigint;
  state: RequestState;
  value: bigint;
  data: RequestData;
};

export type RequestAccountDataArgs = {
  index: number | bigint;
  creator: PublicKey;
  reward: number | bigint;
  rewardMint: PublicKey;
  assertionTimestamp: number | bigint;
  resolveTimestamp: number | bigint;
  state: RequestStateArgs;
  value: number | bigint;
  data: RequestDataArgs;
};

export function getRequestAccountDataSerializer(): Serializer<
  RequestAccountDataArgs,
  RequestAccountData
> {
  return mapSerializer<RequestAccountDataArgs, any, RequestAccountData>(
    struct<RequestAccountData>(
      [
        ["accountType", getAccountTypeSerializer()],
        ["index", u64()],
        ["creator", publicKeySerializer()],
        ["reward", u64()],
        ["rewardMint", publicKeySerializer()],
        ["assertionTimestamp", i64()],
        ["resolveTimestamp", i64()],
        ["state", getRequestStateSerializer()],
        ["value", u64()],
        ["data", getRequestDataSerializer()],
      ],
      { description: "RequestAccountData" },
    ),
    (value) => ({ ...value, accountType: AccountType.Request }),
  );
}

export function deserializeRequest(rawAccount: RpcAccount): Request {
  return deserializeAccount(rawAccount, getRequestAccountDataSerializer());
}

export async function fetchRequest(
  context: Pick<Context, "rpc">,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions,
): Promise<Request> {
  const maybeAccount = await context.rpc.getAccount(toPublicKey(publicKey, false), options);
  assertAccountExists(maybeAccount, "Request");
  return deserializeRequest(maybeAccount);
}

export async function safeFetchRequest(
  context: Pick<Context, "rpc">,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions,
): Promise<Request | null> {
  const maybeAccount = await context.rpc.getAccount(toPublicKey(publicKey, false), options);
  return maybeAccount.exists ? deserializeRequest(maybeAccount) : null;
}

export async function fetchAllRequest(
  context: Pick<Context, "rpc">,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions,
): Promise<Array<Request>> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options,
  );
  return maybeAccounts.map((maybeAccount) => {
    assertAccountExists(maybeAccount, "Request");
    return deserializeRequest(maybeAccount);
  });
}

export async function safeFetchAllRequest(
  context: Pick<Context, "rpc">,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions,
): Promise<Array<Request>> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options,
  );
  return maybeAccounts
    .filter((maybeAccount) => maybeAccount.exists)
    .map((maybeAccount) => deserializeRequest(maybeAccount as RpcAccount));
}

export function getRequestGpaBuilder(context: Pick<Context, "rpc" | "programs">) {
  const programId = context.programs.getPublicKey(
    "optimisticOracle",
    "DVMysqEbKDZdaJ1AVcmAqyVfvvZAMFwUkEQsNMQTvMZg",
  );
  return gpaBuilder(context, programId)
    .registerFields<{
      accountType: AccountTypeArgs;
      index: number | bigint;
      creator: PublicKey;
      reward: number | bigint;
      rewardMint: PublicKey;
      assertionTimestamp: number | bigint;
      resolveTimestamp: number | bigint;
      state: RequestStateArgs;
      value: number | bigint;
      data: RequestDataArgs;
    }>({
      accountType: [0, getAccountTypeSerializer()],
      index: [1, u64()],
      creator: [9, publicKeySerializer()],
      reward: [41, u64()],
      rewardMint: [49, publicKeySerializer()],
      assertionTimestamp: [81, i64()],
      resolveTimestamp: [89, i64()],
      state: [97, getRequestStateSerializer()],
      value: [98, u64()],
      data: [106, getRequestDataSerializer()],
    })
    .deserializeUsing<Request>((account) => deserializeRequest(account))
    .whereField("accountType", AccountType.Request);
}

export function findRequestPda(
  context: Pick<Context, "eddsa" | "programs">,
  seeds: {
    /** The next request index in the oracle. */
    index: number | bigint;
  },
): Pda {
  const programId = context.programs.getPublicKey(
    "optimisticOracle",
    "DVMysqEbKDZdaJ1AVcmAqyVfvvZAMFwUkEQsNMQTvMZg",
  );
  return context.eddsa.findPda(programId, [
    string({ size: "variable" }).serialize("request"),
    u64().serialize(seeds.index),
  ]);
}

export async function fetchRequestFromSeeds(
  context: Pick<Context, "eddsa" | "programs" | "rpc">,
  seeds: Parameters<typeof findRequestPda>[1],
  options?: RpcGetAccountOptions,
): Promise<Request> {
  return fetchRequest(context, findRequestPda(context, seeds), options);
}

export async function safeFetchRequestFromSeeds(
  context: Pick<Context, "eddsa" | "programs" | "rpc">,
  seeds: Parameters<typeof findRequestPda>[1],
  options?: RpcGetAccountOptions,
): Promise<Request | null> {
  return safeFetchRequest(context, findRequestPda(context, seeds), options);
}
