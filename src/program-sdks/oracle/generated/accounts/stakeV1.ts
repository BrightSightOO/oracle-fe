/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import type { AccountTypeArgs } from "../types";
import type {
  Account,
  Context,
  DateTime,
  DateTimeInput,
  Pda,
  PublicKey,
  RpcAccount,
  RpcGetAccountOptions,
  RpcGetAccountsOptions,
} from "@metaplex-foundation/umi";
import type { Serializer } from "@metaplex-foundation/umi/serializers";

import {
  assertAccountExists,
  deserializeAccount,
  gpaBuilder,
  mapDateTimeSerializer,
  publicKey as toPublicKey,
} from "@metaplex-foundation/umi";
import {
  i64,
  mapSerializer,
  publicKey as publicKeySerializer,
  string,
  struct,
  u64,
} from "@metaplex-foundation/umi/serializers";

import { AccountType, getAccountTypeSerializer } from "../types";

export type StakeV1 = Account<StakeV1AccountData>;

export type StakeV1AccountData = {
  accountType: AccountType;
  mint: PublicKey;
  owner: PublicKey;
  delegate: PublicKey;
  amount: bigint;
  lockTimestamp: DateTime;
};

export type StakeV1AccountDataArgs = {
  mint: PublicKey;
  owner: PublicKey;
  delegate: PublicKey;
  amount: number | bigint;
  lockTimestamp: DateTimeInput;
};

export function getStakeV1AccountDataSerializer(): Serializer<
  StakeV1AccountDataArgs,
  StakeV1AccountData
> {
  return mapSerializer<StakeV1AccountDataArgs, any, StakeV1AccountData>(
    struct<StakeV1AccountData>(
      [
        ["accountType", getAccountTypeSerializer()],
        ["mint", publicKeySerializer()],
        ["owner", publicKeySerializer()],
        ["delegate", publicKeySerializer()],
        ["amount", u64()],
        ["lockTimestamp", mapDateTimeSerializer(i64())],
      ],
      { description: "StakeV1AccountData" },
    ),
    (value) => ({ ...value, accountType: AccountType.StakeV1 }),
  );
}

export function deserializeStakeV1(rawAccount: RpcAccount): StakeV1 {
  return deserializeAccount(rawAccount, getStakeV1AccountDataSerializer());
}

export async function fetchStakeV1(
  context: Pick<Context, "rpc">,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions,
): Promise<StakeV1> {
  const maybeAccount = await context.rpc.getAccount(toPublicKey(publicKey, false), options);
  assertAccountExists(maybeAccount, "StakeV1");
  return deserializeStakeV1(maybeAccount);
}

export async function safeFetchStakeV1(
  context: Pick<Context, "rpc">,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions,
): Promise<StakeV1 | null> {
  const maybeAccount = await context.rpc.getAccount(toPublicKey(publicKey, false), options);
  return maybeAccount.exists ? deserializeStakeV1(maybeAccount) : null;
}

export async function fetchAllStakeV1(
  context: Pick<Context, "rpc">,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions,
): Promise<Array<StakeV1>> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options,
  );
  return maybeAccounts.map((maybeAccount) => {
    assertAccountExists(maybeAccount, "StakeV1");
    return deserializeStakeV1(maybeAccount);
  });
}

export async function safeFetchAllStakeV1(
  context: Pick<Context, "rpc">,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions,
): Promise<Array<StakeV1>> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options,
  );
  return maybeAccounts
    .filter((maybeAccount) => maybeAccount.exists)
    .map((maybeAccount) => deserializeStakeV1(maybeAccount as RpcAccount));
}

export function getStakeV1GpaBuilder(context: Pick<Context, "rpc" | "programs">) {
  const programId = context.programs.getPublicKey(
    "optimisticOracle",
    "DVM3hK9SDgXLmVoLng1KrTJCzTnhw31hAnqTYP7uGCot",
  );
  return gpaBuilder(context, programId)
    .registerFields<{
      accountType: AccountTypeArgs;
      mint: PublicKey;
      owner: PublicKey;
      delegate: PublicKey;
      amount: number | bigint;
      lockTimestamp: DateTimeInput;
    }>({
      accountType: [0, getAccountTypeSerializer()],
      mint: [1, publicKeySerializer()],
      owner: [33, publicKeySerializer()],
      delegate: [65, publicKeySerializer()],
      amount: [97, u64()],
      lockTimestamp: [105, mapDateTimeSerializer(i64())],
    })
    .deserializeUsing<StakeV1>((account) => deserializeStakeV1(account))
    .whereField("accountType", AccountType.StakeV1);
}

export function getStakeV1Size(): number {
  return 113;
}

export function findStakeV1Pda(
  context: Pick<Context, "eddsa" | "programs">,
  seeds: {
    /** The address of the wallet. */
    wallet: PublicKey;
  },
): Pda {
  const programId = context.programs.getPublicKey(
    "optimisticOracle",
    "DVM3hK9SDgXLmVoLng1KrTJCzTnhw31hAnqTYP7uGCot",
  );
  return context.eddsa.findPda(programId, [
    string({ size: "variable" }).serialize("stake"),
    publicKeySerializer().serialize(seeds.wallet),
  ]);
}

export async function fetchStakeV1FromSeeds(
  context: Pick<Context, "eddsa" | "programs" | "rpc">,
  seeds: Parameters<typeof findStakeV1Pda>[1],
  options?: RpcGetAccountOptions,
): Promise<StakeV1> {
  return fetchStakeV1(context, findStakeV1Pda(context, seeds), options);
}

export async function safeFetchStakeV1FromSeeds(
  context: Pick<Context, "eddsa" | "programs" | "rpc">,
  seeds: Parameters<typeof findStakeV1Pda>[1],
  options?: RpcGetAccountOptions,
): Promise<StakeV1 | null> {
  return safeFetchStakeV1(context, findStakeV1Pda(context, seeds), options);
}
