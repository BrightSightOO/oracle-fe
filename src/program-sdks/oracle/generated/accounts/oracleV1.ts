/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import type { AccountTypeArgs } from "../types";
import type {
  Account,
  Context,
  Pda,
  PublicKey,
  RpcAccount,
  RpcGetAccountOptions,
  RpcGetAccountsOptions,
} from "@metaplex-foundation/umi";
import type { Serializer } from "@metaplex-foundation/umi/serializers";

import {
  assertAccountExists,
  deserializeAccount,
  gpaBuilder,
  publicKey as toPublicKey,
} from "@metaplex-foundation/umi";
import {
  mapSerializer,
  publicKey as publicKeySerializer,
  string,
  struct,
  u64,
} from "@metaplex-foundation/umi/serializers";

import { AccountType, getAccountTypeSerializer } from "../types";

export type OracleV1 = Account<OracleV1AccountData>;

export type OracleV1AccountData = {
  accountType: AccountType;
  nextIndex: bigint;
  authority: PublicKey;
  governanceMint: PublicKey;
};

export type OracleV1AccountDataArgs = {
  nextIndex: number | bigint;
  authority: PublicKey;
  governanceMint: PublicKey;
};

export function getOracleV1AccountDataSerializer(): Serializer<
  OracleV1AccountDataArgs,
  OracleV1AccountData
> {
  return mapSerializer<OracleV1AccountDataArgs, any, OracleV1AccountData>(
    struct<OracleV1AccountData>(
      [
        ["accountType", getAccountTypeSerializer()],
        ["nextIndex", u64()],
        ["authority", publicKeySerializer()],
        ["governanceMint", publicKeySerializer()],
      ],
      { description: "OracleV1AccountData" },
    ),
    (value) => ({ ...value, accountType: AccountType.OracleV1 }),
  );
}

export function deserializeOracleV1(rawAccount: RpcAccount): OracleV1 {
  return deserializeAccount(rawAccount, getOracleV1AccountDataSerializer());
}

export async function fetchOracleV1(
  context: Pick<Context, "rpc">,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions,
): Promise<OracleV1> {
  const maybeAccount = await context.rpc.getAccount(toPublicKey(publicKey, false), options);
  assertAccountExists(maybeAccount, "OracleV1");
  return deserializeOracleV1(maybeAccount);
}

export async function safeFetchOracleV1(
  context: Pick<Context, "rpc">,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions,
): Promise<OracleV1 | null> {
  const maybeAccount = await context.rpc.getAccount(toPublicKey(publicKey, false), options);
  return maybeAccount.exists ? deserializeOracleV1(maybeAccount) : null;
}

export async function fetchAllOracleV1(
  context: Pick<Context, "rpc">,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions,
): Promise<Array<OracleV1>> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options,
  );
  return maybeAccounts.map((maybeAccount) => {
    assertAccountExists(maybeAccount, "OracleV1");
    return deserializeOracleV1(maybeAccount);
  });
}

export async function safeFetchAllOracleV1(
  context: Pick<Context, "rpc">,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions,
): Promise<Array<OracleV1>> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options,
  );
  return maybeAccounts
    .filter((maybeAccount) => maybeAccount.exists)
    .map((maybeAccount) => deserializeOracleV1(maybeAccount as RpcAccount));
}

export function getOracleV1GpaBuilder(context: Pick<Context, "rpc" | "programs">) {
  const programId = context.programs.getPublicKey(
    "optimisticOracle",
    "DVM3hK9SDgXLmVoLng1KrTJCzTnhw31hAnqTYP7uGCot",
  );
  return gpaBuilder(context, programId)
    .registerFields<{
      accountType: AccountTypeArgs;
      nextIndex: number | bigint;
      authority: PublicKey;
      governanceMint: PublicKey;
    }>({
      accountType: [0, getAccountTypeSerializer()],
      nextIndex: [1, u64()],
      authority: [9, publicKeySerializer()],
      governanceMint: [41, publicKeySerializer()],
    })
    .deserializeUsing<OracleV1>((account) => deserializeOracleV1(account))
    .whereField("accountType", AccountType.OracleV1);
}

export function getOracleV1Size(): number {
  return 73;
}

export function findOracleV1Pda(context: Pick<Context, "eddsa" | "programs">): Pda {
  const programId = context.programs.getPublicKey(
    "optimisticOracle",
    "DVM3hK9SDgXLmVoLng1KrTJCzTnhw31hAnqTYP7uGCot",
  );
  return context.eddsa.findPda(programId, [string({ size: "variable" }).serialize("oracle")]);
}

export async function fetchOracleV1FromSeeds(
  context: Pick<Context, "eddsa" | "programs" | "rpc">,
  options?: RpcGetAccountOptions,
): Promise<OracleV1> {
  return fetchOracleV1(context, findOracleV1Pda(context), options);
}

export async function safeFetchOracleV1FromSeeds(
  context: Pick<Context, "eddsa" | "programs" | "rpc">,
  options?: RpcGetAccountOptions,
): Promise<OracleV1 | null> {
  return safeFetchOracleV1(context, findOracleV1Pda(context), options);
}
