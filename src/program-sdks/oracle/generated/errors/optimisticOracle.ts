/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import type { Program } from "@metaplex-foundation/umi";

import { ProgramError } from "@metaplex-foundation/umi";

type ProgramErrorConstructor = new (program: Program, cause?: Error) => ProgramError;
const codeToErrorMap = new Map<number, ProgramErrorConstructor>();
const nameToErrorMap = new Map<string, ProgramErrorConstructor>();

/** ArithmeticOverflow: Program arithmetic overflowed */
export class ArithmeticOverflowError extends ProgramError {
  override readonly name: string = "ArithmeticOverflow";

  readonly code: number = 0x0; // 0

  constructor(program: Program, cause?: Error) {
    super("Program arithmetic overflowed", program, cause);
  }
}
codeToErrorMap.set(0x0, ArithmeticOverflowError);
nameToErrorMap.set("ArithmeticOverflow", ArithmeticOverflowError);

/** InsufficientBond: Insufficient bond */
export class InsufficientBondError extends ProgramError {
  override readonly name: string = "InsufficientBond";

  readonly code: number = 0x1; // 1

  constructor(program: Program, cause?: Error) {
    super("Insufficient bond", program, cause);
  }
}
codeToErrorMap.set(0x1, InsufficientBondError);
nameToErrorMap.set("InsufficientBond", InsufficientBondError);

/** NotAsserted: Request does not have an assertion */
export class NotAssertedError extends ProgramError {
  override readonly name: string = "NotAsserted";

  readonly code: number = 0x2; // 2

  constructor(program: Program, cause?: Error) {
    super("Request does not have an assertion", program, cause);
  }
}
codeToErrorMap.set(0x2, NotAssertedError);
nameToErrorMap.set("NotAsserted", NotAssertedError);

/** NotDisputed: Request is not disputed */
export class NotDisputedError extends ProgramError {
  override readonly name: string = "NotDisputed";

  readonly code: number = 0x3; // 3

  constructor(program: Program, cause?: Error) {
    super("Request is not disputed", program, cause);
  }
}
codeToErrorMap.set(0x3, NotDisputedError);
nameToErrorMap.set("NotDisputed", NotDisputedError);

/** AlreadyAsserted: Request already has an assertion */
export class AlreadyAssertedError extends ProgramError {
  override readonly name: string = "AlreadyAsserted";

  readonly code: number = 0x4; // 4

  constructor(program: Program, cause?: Error) {
    super("Request already has an assertion", program, cause);
  }
}
codeToErrorMap.set(0x4, AlreadyAssertedError);
nameToErrorMap.set("AlreadyAsserted", AlreadyAssertedError);

/** AlreadyDisputed: Assertion has already been disputed */
export class AlreadyDisputedError extends ProgramError {
  override readonly name: string = "AlreadyDisputed";

  readonly code: number = 0x5; // 5

  constructor(program: Program, cause?: Error) {
    super("Assertion has already been disputed", program, cause);
  }
}
codeToErrorMap.set(0x5, AlreadyDisputedError);
nameToErrorMap.set("AlreadyDisputed", AlreadyDisputedError);

/** AlreadyResolved: Request has already been resolved */
export class AlreadyResolvedError extends ProgramError {
  override readonly name: string = "AlreadyResolved";

  readonly code: number = 0x6; // 6

  constructor(program: Program, cause?: Error) {
    super("Request has already been resolved", program, cause);
  }
}
codeToErrorMap.set(0x6, AlreadyResolvedError);
nameToErrorMap.set("AlreadyResolved", AlreadyResolvedError);

/** AssertionTooEarly: Request is not accepting assertion yet */
export class AssertionTooEarlyError extends ProgramError {
  override readonly name: string = "AssertionTooEarly";

  readonly code: number = 0x7; // 7

  constructor(program: Program, cause?: Error) {
    super("Request is not accepting assertion yet", program, cause);
  }
}
codeToErrorMap.set(0x7, AssertionTooEarlyError);
nameToErrorMap.set("AssertionTooEarly", AssertionTooEarlyError);

/** DisputeWindowNotExpired: Dispute window has not expired */
export class DisputeWindowNotExpiredError extends ProgramError {
  override readonly name: string = "DisputeWindowNotExpired";

  readonly code: number = 0x8; // 8

  constructor(program: Program, cause?: Error) {
    super("Dispute window has not expired", program, cause);
  }
}
codeToErrorMap.set(0x8, DisputeWindowNotExpiredError);
nameToErrorMap.set("DisputeWindowNotExpired", DisputeWindowNotExpiredError);

/** DisputeWindowExpired: Dispute window has expired */
export class DisputeWindowExpiredError extends ProgramError {
  override readonly name: string = "DisputeWindowExpired";

  readonly code: number = 0x9; // 9

  constructor(program: Program, cause?: Error) {
    super("Dispute window has expired", program, cause);
  }
}
codeToErrorMap.set(0x9, DisputeWindowExpiredError);
nameToErrorMap.set("DisputeWindowExpired", DisputeWindowExpiredError);

/** InvalidValue: Value is not valid for the request */
export class InvalidValueError extends ProgramError {
  override readonly name: string = "InvalidValue";

  readonly code: number = 0xa; // 10

  constructor(program: Program, cause?: Error) {
    super("Value is not valid for the request", program, cause);
  }
}
codeToErrorMap.set(0xa, InvalidValueError);
nameToErrorMap.set("InvalidValue", InvalidValueError);

/** InvalidDispute: Disputed value falls within range of acceptable deviation for asserted value */
export class InvalidDisputeError extends ProgramError {
  override readonly name: string = "InvalidDispute";

  readonly code: number = 0xb; // 11

  constructor(program: Program, cause?: Error) {
    super(
      "Disputed value falls within range of acceptable deviation for asserted value",
      program,
      cause,
    );
  }
}
codeToErrorMap.set(0xb, InvalidDisputeError);
nameToErrorMap.set("InvalidDispute", InvalidDisputeError);

/** DisputerIsAsserter: Disputer cannot be the same as the asserter */
export class DisputerIsAsserterError extends ProgramError {
  override readonly name: string = "DisputerIsAsserter";

  readonly code: number = 0xc; // 12

  constructor(program: Program, cause?: Error) {
    super("Disputer cannot be the same as the asserter", program, cause);
  }
}
codeToErrorMap.set(0xc, DisputerIsAsserterError);
nameToErrorMap.set("DisputerIsAsserter", DisputerIsAsserterError);

/** BondMismatch: Bond mint address does not match */
export class BondMismatchError extends ProgramError {
  override readonly name: string = "BondMismatch";

  readonly code: number = 0xd; // 13

  constructor(program: Program, cause?: Error) {
    super("Bond mint address does not match", program, cause);
  }
}
codeToErrorMap.set(0xd, BondMismatchError);
nameToErrorMap.set("BondMismatch", BondMismatchError);

/** VotingWindowNotExpired: Voting window has not expired */
export class VotingWindowNotExpiredError extends ProgramError {
  override readonly name: string = "VotingWindowNotExpired";

  readonly code: number = 0xe; // 14

  constructor(program: Program, cause?: Error) {
    super("Voting window has not expired", program, cause);
  }
}
codeToErrorMap.set(0xe, VotingWindowNotExpiredError);
nameToErrorMap.set("VotingWindowNotExpired", VotingWindowNotExpiredError);

/** VotingWindowExpired: Voting window has expired */
export class VotingWindowExpiredError extends ProgramError {
  override readonly name: string = "VotingWindowExpired";

  readonly code: number = 0xf; // 15

  constructor(program: Program, cause?: Error) {
    super("Voting window has expired", program, cause);
  }
}
codeToErrorMap.set(0xf, VotingWindowExpiredError);
nameToErrorMap.set("VotingWindowExpired", VotingWindowExpiredError);

/**
 * Attempts to resolve a custom program error from the provided error code.
 * @category Errors
 */
export function getOptimisticOracleErrorFromCode(
  code: number,
  program: Program,
  cause?: Error,
): ProgramError | null {
  const constructor = codeToErrorMap.get(code);
  return constructor ? new constructor(program, cause) : null;
}

/**
 * Attempts to resolve a custom program error from the provided error name, i.e. 'Unauthorized'.
 * @category Errors
 */
export function getOptimisticOracleErrorFromName(
  name: string,
  program: Program,
  cause?: Error,
): ProgramError | null {
  const constructor = nameToErrorMap.get(name);
  return constructor ? new constructor(program, cause) : null;
}
