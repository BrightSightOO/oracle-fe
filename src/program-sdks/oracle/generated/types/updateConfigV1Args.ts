/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import type { PublicKey } from "@metaplex-foundation/umi";
import type {
  GetDataEnumKind,
  GetDataEnumKindContent,
  Serializer,
} from "@metaplex-foundation/umi/serializers";

import {
  dataEnum,
  publicKey as publicKeySerializer,
  struct,
  u16,
  u32,
} from "@metaplex-foundation/umi/serializers";

export type UpdateConfigV1Args =
  | { __kind: "Authority"; newAuthority: PublicKey }
  | {
      __kind: "Config";
      newBondFeeBps: number;
      newDisputeWindow: number;
      newVotingWindow: number;
      newArbitrationWindow: number;
    };

export type UpdateConfigV1ArgsArgs = UpdateConfigV1Args;

export function getUpdateConfigV1ArgsSerializer(): Serializer<
  UpdateConfigV1ArgsArgs,
  UpdateConfigV1Args
> {
  return dataEnum<UpdateConfigV1Args>(
    [
      [
        "Authority",
        struct<GetDataEnumKindContent<UpdateConfigV1Args, "Authority">>([
          ["newAuthority", publicKeySerializer()],
        ]),
      ],
      [
        "Config",
        struct<GetDataEnumKindContent<UpdateConfigV1Args, "Config">>([
          ["newBondFeeBps", u16()],
          ["newDisputeWindow", u32()],
          ["newVotingWindow", u32()],
          ["newArbitrationWindow", u32()],
        ]),
      ],
    ],
    { description: "UpdateConfigV1Args" },
  );
}

// Data Enum Helpers.
export function updateConfigV1Args(
  kind: "Authority",
  data: GetDataEnumKindContent<UpdateConfigV1ArgsArgs, "Authority">,
): GetDataEnumKind<UpdateConfigV1ArgsArgs, "Authority">;
export function updateConfigV1Args(
  kind: "Config",
  data: GetDataEnumKindContent<UpdateConfigV1ArgsArgs, "Config">,
): GetDataEnumKind<UpdateConfigV1ArgsArgs, "Config">;
export function updateConfigV1Args<K extends UpdateConfigV1ArgsArgs["__kind"]>(
  kind: K,
  data?: any,
): Extract<UpdateConfigV1ArgsArgs, { __kind: K }> {
  return Array.isArray(data) ? { __kind: kind, fields: data } : { __kind: kind, ...(data ?? {}) };
}
export function isUpdateConfigV1Args<K extends UpdateConfigV1Args["__kind"]>(
  kind: K,
  value: UpdateConfigV1Args,
): value is UpdateConfigV1Args & { __kind: K } {
  return value.__kind === kind;
}
