/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import type { ResolvedAccount, ResolvedAccountsWithIndices } from "../shared";
import type { Context, Pda, PublicKey, Signer, TransactionBuilder } from "@metaplex-foundation/umi";
import type { Serializer } from "@metaplex-foundation/umi/serializers";

import { transactionBuilder } from "@metaplex-foundation/umi";
import {
  mapSerializer,
  publicKey as publicKeySerializer,
  struct,
  u8,
} from "@metaplex-foundation/umi/serializers";

import { findOracleV1Pda } from "../accounts";
import { getAccountMetasAndSigners } from "../shared";

// Accounts.
export type CreateOracleV1InstructionAccounts = {
  /** Oracle */
  oracle?: PublicKey | Pda;
  /** Governance token mint */
  governanceMint: PublicKey | Pda;
  /** Payer */
  payer?: Signer;
  /** System program */
  systemProgram?: PublicKey | Pda;
};

// Data.
export type CreateOracleV1InstructionData = {
  discriminator: number;
  authority: PublicKey;
};

export type CreateOracleV1InstructionDataArgs = { authority: PublicKey };

export function getCreateOracleV1InstructionDataSerializer(): Serializer<
  CreateOracleV1InstructionDataArgs,
  CreateOracleV1InstructionData
> {
  return mapSerializer<CreateOracleV1InstructionDataArgs, any, CreateOracleV1InstructionData>(
    struct<CreateOracleV1InstructionData>(
      [
        ["discriminator", u8()],
        ["authority", publicKeySerializer()],
      ],
      { description: "CreateOracleV1InstructionData" },
    ),
    (value) => ({ ...value, discriminator: 0 }),
  );
}

// Args.
export type CreateOracleV1InstructionArgs = CreateOracleV1InstructionDataArgs;

// Instruction.
export function createOracleV1(
  context: Pick<Context, "eddsa" | "payer" | "programs">,
  input: CreateOracleV1InstructionAccounts & CreateOracleV1InstructionArgs,
): TransactionBuilder {
  // Program ID.
  const programId = context.programs.getPublicKey(
    "optimisticOracle",
    "DVM3hK9SDgXLmVoLng1KrTJCzTnhw31hAnqTYP7uGCot",
  );

  // Accounts.
  const resolvedAccounts = {
    oracle: {
      index: 0,
      isWritable: true as boolean,
      value: input.oracle ?? null,
    },
    governanceMint: {
      index: 1,
      isWritable: false as boolean,
      value: input.governanceMint ?? null,
    },
    payer: {
      index: 2,
      isWritable: true as boolean,
      value: input.payer ?? null,
    },
    systemProgram: {
      index: 3,
      isWritable: false as boolean,
      value: input.systemProgram ?? null,
    },
  } satisfies ResolvedAccountsWithIndices;

  // Arguments.
  const resolvedArgs: CreateOracleV1InstructionArgs = { ...input };

  // Default values.
  if (!resolvedAccounts.oracle.value) {
    resolvedAccounts.oracle.value = findOracleV1Pda(context);
  }
  if (!resolvedAccounts.payer.value) {
    resolvedAccounts.payer.value = context.payer;
  }
  if (!resolvedAccounts.systemProgram.value) {
    resolvedAccounts.systemProgram.value = context.programs.getPublicKey(
      "splSystem",
      "11111111111111111111111111111111",
    );
    resolvedAccounts.systemProgram.isWritable = false;
  }

  // Accounts in order.
  const orderedAccounts: Array<ResolvedAccount> = Object.values(resolvedAccounts).sort(
    (a, b) => a.index - b.index,
  );

  // Keys and Signers.
  const [keys, signers] = getAccountMetasAndSigners(orderedAccounts, "programId", programId);

  // Data.
  const data = getCreateOracleV1InstructionDataSerializer().serialize(resolvedArgs);

  // Bytes Created On Chain.
  const bytesCreatedOnChain = 0;

  return transactionBuilder([
    { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
  ]);
}
