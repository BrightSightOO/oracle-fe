/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import type { ResolvedAccount, ResolvedAccountsWithIndices } from "../shared";
import type { Context, Pda, PublicKey, Signer, TransactionBuilder } from "@metaplex-foundation/umi";
import type { Serializer } from "@metaplex-foundation/umi/serializers";

import { findAssociatedTokenPda } from "@metaplex-foundation/mpl-toolbox";
import { transactionBuilder } from "@metaplex-foundation/umi";
import { mapSerializer, struct, u8 } from "@metaplex-foundation/umi/serializers";

import { findDisputeBondPda, findRewardPda } from "../../hooked";
import { expectPublicKey, getAccountMetasAndSigners } from "../shared";

// Accounts.
export type ClaimDisputeV1InstructionAccounts = {
  /** Request */
  request: PublicKey | Pda;
  /** Assertion */
  assertion: PublicKey | Pda;
  /** Bond mint */
  bondMint: PublicKey | Pda;
  /** Reclaimed bond destination token account */
  bondDestination?: PublicKey | Pda;
  /** Disputer bond escrow token account */
  bondEscrow?: PublicKey | Pda;
  /** Reward mint */
  rewardMint: PublicKey | Pda;
  /** Reward destination token account */
  rewardDestination?: PublicKey | Pda;
  /** Reward escrow token account */
  rewardEscrow?: PublicKey | Pda;
  /** Disputer */
  disputer?: Signer;
  /** SPL token program */
  tokenProgram?: PublicKey | Pda;
  /** System program */
  systemProgram?: PublicKey | Pda;
};

// Data.
export type ClaimDisputeV1InstructionData = { discriminator: number };

export type ClaimDisputeV1InstructionDataArgs = {};

export function getClaimDisputeV1InstructionDataSerializer(): Serializer<
  ClaimDisputeV1InstructionDataArgs,
  ClaimDisputeV1InstructionData
> {
  return mapSerializer<ClaimDisputeV1InstructionDataArgs, any, ClaimDisputeV1InstructionData>(
    struct<ClaimDisputeV1InstructionData>([["discriminator", u8()]], {
      description: "ClaimDisputeV1InstructionData",
    }),
    (value) => ({ ...value, discriminator: 14 }),
  );
}

// Instruction.
export function claimDisputeV1(
  context: Pick<Context, "eddsa" | "identity" | "programs">,
  input: ClaimDisputeV1InstructionAccounts,
): TransactionBuilder {
  // Program ID.
  const programId = context.programs.getPublicKey(
    "optimisticOracle",
    "DVM3hK9SDgXLmVoLng1KrTJCzTnhw31hAnqTYP7uGCot",
  );

  // Accounts.
  const resolvedAccounts = {
    request: {
      index: 0,
      isWritable: false as boolean,
      value: input.request ?? null,
    },
    assertion: {
      index: 1,
      isWritable: true as boolean,
      value: input.assertion ?? null,
    },
    bondMint: {
      index: 2,
      isWritable: false as boolean,
      value: input.bondMint ?? null,
    },
    bondDestination: {
      index: 3,
      isWritable: true as boolean,
      value: input.bondDestination ?? null,
    },
    bondEscrow: {
      index: 4,
      isWritable: true as boolean,
      value: input.bondEscrow ?? null,
    },
    rewardMint: {
      index: 5,
      isWritable: false as boolean,
      value: input.rewardMint ?? null,
    },
    rewardDestination: {
      index: 6,
      isWritable: true as boolean,
      value: input.rewardDestination ?? null,
    },
    rewardEscrow: {
      index: 7,
      isWritable: true as boolean,
      value: input.rewardEscrow ?? null,
    },
    disputer: {
      index: 8,
      isWritable: true as boolean,
      value: input.disputer ?? null,
    },
    tokenProgram: {
      index: 9,
      isWritable: false as boolean,
      value: input.tokenProgram ?? null,
    },
    systemProgram: {
      index: 10,
      isWritable: false as boolean,
      value: input.systemProgram ?? null,
    },
  } satisfies ResolvedAccountsWithIndices;

  // Default values.
  if (!resolvedAccounts.disputer.value) {
    resolvedAccounts.disputer.value = context.identity;
  }
  if (!resolvedAccounts.bondDestination.value) {
    resolvedAccounts.bondDestination.value = findAssociatedTokenPda(context, {
      mint: expectPublicKey(resolvedAccounts.bondMint.value),
      owner: expectPublicKey(resolvedAccounts.disputer.value),
    });
  }
  if (!resolvedAccounts.bondEscrow.value) {
    resolvedAccounts.bondEscrow.value = findDisputeBondPda(context, {
      request: expectPublicKey(resolvedAccounts.request.value),
    });
  }
  if (!resolvedAccounts.rewardDestination.value) {
    resolvedAccounts.rewardDestination.value = findAssociatedTokenPda(context, {
      mint: expectPublicKey(resolvedAccounts.rewardMint.value),
      owner: expectPublicKey(resolvedAccounts.disputer.value),
    });
  }
  if (!resolvedAccounts.rewardEscrow.value) {
    resolvedAccounts.rewardEscrow.value = findRewardPda(context, {
      request: expectPublicKey(resolvedAccounts.request.value),
    });
  }
  if (!resolvedAccounts.tokenProgram.value) {
    resolvedAccounts.tokenProgram.value = context.programs.getPublicKey(
      "splToken",
      "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA",
    );
    resolvedAccounts.tokenProgram.isWritable = false;
  }
  if (!resolvedAccounts.systemProgram.value) {
    resolvedAccounts.systemProgram.value = context.programs.getPublicKey(
      "splSystem",
      "11111111111111111111111111111111",
    );
    resolvedAccounts.systemProgram.isWritable = false;
  }

  // Accounts in order.
  const orderedAccounts: Array<ResolvedAccount> = Object.values(resolvedAccounts).sort(
    (a, b) => a.index - b.index,
  );

  // Keys and Signers.
  const [keys, signers] = getAccountMetasAndSigners(orderedAccounts, "programId", programId);

  // Data.
  const data = getClaimDisputeV1InstructionDataSerializer().serialize({});

  // Bytes Created On Chain.
  const bytesCreatedOnChain = 0;

  return transactionBuilder([
    { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
  ]);
}
