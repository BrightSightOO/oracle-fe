/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import type { ClusterFilter, Context, Program, PublicKey } from "@metaplex-foundation/umi";

import { getOptimisticOracleErrorFromCode, getOptimisticOracleErrorFromName } from "../errors";

export const OPTIMISTIC_ORACLE_PROGRAM_ID =
  "DVMysqEbKDZdaJ1AVcmAqyVfvvZAMFwUkEQsNMQTvMZg" as PublicKey<"DVMysqEbKDZdaJ1AVcmAqyVfvvZAMFwUkEQsNMQTvMZg">;

export function createOptimisticOracleProgram(): Program {
  return {
    name: "optimisticOracle",
    publicKey: OPTIMISTIC_ORACLE_PROGRAM_ID,
    getErrorFromCode(code: number, cause?: Error) {
      return getOptimisticOracleErrorFromCode(code, this, cause);
    },
    getErrorFromName(name: string, cause?: Error) {
      return getOptimisticOracleErrorFromName(name, this, cause);
    },
    isOnCluster() {
      return true;
    },
  };
}

export function getOptimisticOracleProgram<T extends Program = Program>(
  context: Pick<Context, "programs">,
  clusterFilter?: ClusterFilter,
): T {
  return context.programs.get<T>("optimisticOracle", clusterFilter);
}

export function getOptimisticOracleProgramId(
  context: Pick<Context, "programs">,
  clusterFilter?: ClusterFilter,
): PublicKey {
  return context.programs.getPublicKey(
    "optimisticOracle",
    OPTIMISTIC_ORACLE_PROGRAM_ID,
    clusterFilter,
  );
}
