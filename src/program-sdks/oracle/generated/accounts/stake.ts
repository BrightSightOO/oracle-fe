/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import type { AccountTypeArgs } from "../types";
import type {
  Account,
  Context,
  Pda,
  PublicKey,
  RpcAccount,
  RpcGetAccountOptions,
  RpcGetAccountsOptions,
} from "@metaplex-foundation/umi";
import type { Serializer } from "@metaplex-foundation/umi/serializers";

import {
  assertAccountExists,
  deserializeAccount,
  gpaBuilder,
  publicKey as toPublicKey,
} from "@metaplex-foundation/umi";
import {
  mapSerializer,
  publicKey as publicKeySerializer,
  string,
  struct,
  u64,
} from "@metaplex-foundation/umi/serializers";

import { AccountType, getAccountTypeSerializer } from "../types";

export type Stake = Account<StakeAccountData>;

export type StakeAccountData = {
  accountType: AccountType;
  owner: PublicKey;
  delegate: PublicKey;
  amount: bigint;
};

export type StakeAccountDataArgs = {
  owner: PublicKey;
  delegate: PublicKey;
  amount: number | bigint;
};

export function getStakeAccountDataSerializer(): Serializer<
  StakeAccountDataArgs,
  StakeAccountData
> {
  return mapSerializer<StakeAccountDataArgs, any, StakeAccountData>(
    struct<StakeAccountData>(
      [
        ["accountType", getAccountTypeSerializer()],
        ["owner", publicKeySerializer()],
        ["delegate", publicKeySerializer()],
        ["amount", u64()],
      ],
      { description: "StakeAccountData" },
    ),
    (value) => ({ ...value, accountType: AccountType.Stake }),
  );
}

export function deserializeStake(rawAccount: RpcAccount): Stake {
  return deserializeAccount(rawAccount, getStakeAccountDataSerializer());
}

export async function fetchStake(
  context: Pick<Context, "rpc">,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions,
): Promise<Stake> {
  const maybeAccount = await context.rpc.getAccount(toPublicKey(publicKey, false), options);
  assertAccountExists(maybeAccount, "Stake");
  return deserializeStake(maybeAccount);
}

export async function safeFetchStake(
  context: Pick<Context, "rpc">,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions,
): Promise<Stake | null> {
  const maybeAccount = await context.rpc.getAccount(toPublicKey(publicKey, false), options);
  return maybeAccount.exists ? deserializeStake(maybeAccount) : null;
}

export async function fetchAllStake(
  context: Pick<Context, "rpc">,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions,
): Promise<Array<Stake>> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options,
  );
  return maybeAccounts.map((maybeAccount) => {
    assertAccountExists(maybeAccount, "Stake");
    return deserializeStake(maybeAccount);
  });
}

export async function safeFetchAllStake(
  context: Pick<Context, "rpc">,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions,
): Promise<Array<Stake>> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options,
  );
  return maybeAccounts
    .filter((maybeAccount) => maybeAccount.exists)
    .map((maybeAccount) => deserializeStake(maybeAccount as RpcAccount));
}

export function getStakeGpaBuilder(context: Pick<Context, "rpc" | "programs">) {
  const programId = context.programs.getPublicKey(
    "optimisticOracle",
    "DVMysqEbKDZdaJ1AVcmAqyVfvvZAMFwUkEQsNMQTvMZg",
  );
  return gpaBuilder(context, programId)
    .registerFields<{
      accountType: AccountTypeArgs;
      owner: PublicKey;
      delegate: PublicKey;
      amount: number | bigint;
    }>({
      accountType: [0, getAccountTypeSerializer()],
      owner: [1, publicKeySerializer()],
      delegate: [33, publicKeySerializer()],
      amount: [65, u64()],
    })
    .deserializeUsing<Stake>((account) => deserializeStake(account))
    .whereField("accountType", AccountType.Stake);
}

export function getStakeSize(): number {
  return 73;
}

export function findStakePda(
  context: Pick<Context, "eddsa" | "programs">,
  seeds: {
    /** The address of the wallet. */
    wallet: PublicKey;
  },
): Pda {
  const programId = context.programs.getPublicKey(
    "optimisticOracle",
    "DVMysqEbKDZdaJ1AVcmAqyVfvvZAMFwUkEQsNMQTvMZg",
  );
  return context.eddsa.findPda(programId, [
    string({ size: "variable" }).serialize("stake"),
    publicKeySerializer().serialize(seeds.wallet),
  ]);
}

export async function fetchStakeFromSeeds(
  context: Pick<Context, "eddsa" | "programs" | "rpc">,
  seeds: Parameters<typeof findStakePda>[1],
  options?: RpcGetAccountOptions,
): Promise<Stake> {
  return fetchStake(context, findStakePda(context, seeds), options);
}

export async function safeFetchStakeFromSeeds(
  context: Pick<Context, "eddsa" | "programs" | "rpc">,
  seeds: Parameters<typeof findStakePda>[1],
  options?: RpcGetAccountOptions,
): Promise<Stake | null> {
  return safeFetchStake(context, findStakePda(context, seeds), options);
}
